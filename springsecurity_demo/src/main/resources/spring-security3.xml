<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
<!--【注意】：这里所有的路径必须以/开头，否则启动报错-->
<!--    静态资源过滤 匿名访问security = "none"-->
    <security:http pattern="login.html" security="none"/>
    <security:http pattern="fail.html" security="none"/>

<!--    拦截规则
           auto-config：true：自动生成登陆页面，做登陆认证处理，退出处理，
           请求头Authentication：Basic{totken}
           use-expressions：intercept-url这个标签access属性的配置，true时，access的值就可以使用表达式 hasRole hasAuthority....
           false access的值就只能是以ROLE_打头的字符串与3个常量值-->
    <security:http auto-config="true" use-expressions="true">
<!--只要认证通过就可以访问-->
        <security:intercept-url pattern="index.html" access="isAuthenticated()"/>
        <security:intercept-url pattern="a.html" access="isAuthenticated()"/>

<!-- 拥有add权限就可以访问b.html页面-->
     <security:intercept-url pattern="/b.html" access="hasAnyAuthority('add')"/>
        <!-- 注意：拥有ROLE_ADMIN角色就可以访问c.html页面，
                 此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_-->
        <security:intercept-url pattern="/c.html" access="hasRole('ADMIN')"/>

<!--       拥有ROLR_admin角色就可以访问d.html页面 -->
        <security:intercept-url pattern="d.html" access="hasRole('ABC')"/>
        <security:form-login
            login-page="login.html"
            login-processing-url="/ccc"
            username-parameter="abc"
            password-parameter="bbb"
            authentication-failure-url="fail.html"
            default-target-url="/index.html"
            always-use-default-target="true"/>
<!--     关闭跨域访问控制-->
        <security:csrf disabled="true"/>
    </security:http>
    <!--        认证管理器-->
    <security:authentication-manager>
        <!--用户信息的提供者
       user-service-ref: 用户服务指定由容器中的bean对象来提供用户信息
   -->
        <security:authentication-provider user-service-ref="userService">
            <security:password-encoder ref="encoder"/>
        </security:authentication-provider>
    </security:authentication-manager>
    <bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <!--登陆用户信息的提供者-->
    <bean id="userService" class="com.itheima.service.UserService"/>
</beans>